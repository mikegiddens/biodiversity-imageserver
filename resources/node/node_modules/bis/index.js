
var	path = require('path');
var _ = require('underscore');
var sprintf = require('sprintf').sprintf;
var fs = require('fs');
var mkdirp = require('mkdirp');
var	gm = require('gm');
var mysql = require('mysql');

var BIS = function(params){
	var connection = mysql.createConnection({
	  host     : 'localhost',
	  user     : 'root',
	  password : '',
	  database : 'bis',
	});
	connection.connect();

	var loopFlag = false;
	var storageDevices = {};
	
	this.getAllStorageDevices();
	
	// Storage Functions
	
	function getAllStorageDevices() {
		connection.query('SELECT * FROM storage_device',function(err,rows){
			if(!err) {
				for(var i=0;i<rows.length;i++) {
					storageDevices[rows[i].storage_id] = rows[i];
				}
			return true;
			} else {
				return false;
			}
		});
	}
	
	function getStorageType(storageId) {
		if('undefined' == typeof storageId || storageId == '' || 'undefined' == typeof storageDevices[storageId]) return false;
		return storageDevices[storageId].type;
	}
	
	// Image Functions
	
	function loadImageById(imageId,callback) {
		imageId = ('undefined' != typeof imageId && imageId != '') ? imageId : '';
		if(imageId = '') {
			return callback(false);
		} else {
			connection.query(' SELECT * FROM image WHERE image_id = ? ', [imageId], function(err, rows) {
				if(!err) {
					return (rows.length <= 0) ? callback(false) : callback(rows[0]);
				} else {
					return callback(false);
				}
			});
		}
	}

	function imageSave(params,callback) {
		var paramArray = ['image_id','filename','barcode','path','storage_id','width','height','Family','Genus','SpecificEpithet','rank','author','title','description','GlobalUniqueIdentifier','creative_commons','characters','flickr_PlantID','flickr_modified','flickr_details','picassa_PlantID','picassa_modified','gTileProcessed','zoomEnabled','processed','box_flag','ocr_flag','ocr_value','namefinder_flag','namefinder_value','ScientificName','CollectionCode','CatalogueNumber','guess_flag','tmpFamily','tmpFamilyAccepted','tmpGenus','tmpGenusAccepted];
		var queryParams = [],fields = [], values = [], query = '';
		var me = this;
		_.each(params, function(value,key) {
			if(-1 != _.indexOf(paramArray,key)) {
				if(key != 'image_id') {
					fields.push(key);
					values.push(value);
				}
				queryParams.push(sprintf(" %s = '%s' ", key, value));
			}
		});
		this.imageExistsById(params.image_id, function(data) {
			queryParams.push(" timestamp_modified = datetime() ");
			if(false != data) {
				query = ' UPDATE image SET ' + queryParams.join(' , ') + sprintf(" WHERE image_id = '%s' ", params.image_id);
			} else {
				query = ' INSERT INTO image ( ' + fields.join(' , ') + ", timestamp_modified ) VALUES ('" + values.join("' , '") + "' , datetime()) ";
			}
			// console.log(query);
			me.projectDb.run(query, function(err) {
				if (err) {
					console.log(err);
					return(callback(false));
				} else {
					console.log("Image added / updated: ");
					if(false != data) {
						return(callback(this.changes));
					} else {
						return(callback(this.lastID));
					}
				}
			});
		});
	}


	
	// Image Manipulation
	
	function createThumb(params,callback) {
		params = ('undefined' != typeof params) ? params : '';
		params.imagePath = ('undefined' != typeof params.imagePath && params.imagePath != '') ? params.imagePath : '';
		params.width = ('undefined' != typeof params.width && params.width != '') ? params.width : '';
		params.height = ('undefined' != typeof params.height && params.height != '') ? params.height : '';
		params.postFix = ('undefined' != typeof params.postFix && params.postFix != '') ? params.postFix : '';
		if(params.imagePath == '' || params.width == '' || params.height) {
			return callback(false);
		} else {
			if(path.existsSync(params.imagePath)) {
				// to preserve aspect ratio
				gm( params.imagePath ).size(function(err, value){
					var width,height;
					var destination = path.dirname(params.imagePath) + '\\' + path.basename(params.imagePath,path.extname(params.imagePath)) + params.postFix + path.extname(params.imagePath);

					if('undefined' != typeof value) {
						width = value.width;
						height = value.height;
						var ratio,newWidth,newHeight;
					   if (value.width > value.height) {
							height = params.height;
							width = params.height * (value.width / value.height);
						} else {
							width = params.width;
							height = params.width * (value.height / value.width);
						}
					} else {
						width = params.width; height = 0;
					}
					gm( params.imagePath ).thumb(width, height, destination, 90 , function(err) {
						return callback(true);
					});
				});
			} else {
				return callback(false);
			}
		}
	}
	
	// Process Queue Functions
	
	function getPQueueCount(params,callback) {
		params = ('undefined' != typeof params) ? params : '';
		params.processType = ('undefined' != typeof params.processType && params.processType !='' && -1 != _.indexOf(['flickr_add','picassa_add','zoomify','google_tile','ocr_add','box_add','name_add','evernote','all'],params.processType)) ? params.processType : '';
		var query = ' SELECT count(*) ct FROM process_queue ';
		if(params.processType != '') {
			query += sprintf(" WHERE process_type = '%s' ", connection.escape(params.processType));
		}
		connection.query(query, function(err, rows, fields) {
			if (!err) {
				console.log(rows);
				return callback(rows[0].ct);
			} else {
				console.log(err);
				return callback(false);
			}
		});
		
	}
	
	function deleteProcessQueue(params,calback) {
		params = ('undefined' != typeof params) ? params : '';
		params.imageId = ('undefined' != typeof params.imageId && params.imageId != '') ? params.imageId : '';
		params.processType = ('undefined' != typeof params.processType && params.processType != '') ? params.processType : '';
		if(params.imageId == '' || params.processType == '') {
			return callback(false);
		} else {
			connection.query('DELETE FROM process_queue WHERE image_id = ? AND process_type = ? ',[params.imageId,params.processType],function(err, result){
				return (!err) ? callback(true) : callback(false);
			});
		}
		
	}
	
	function popQueue(processType,callback) {
		processType = ('undefined' != typeof processType && processType != '') ? processType : '';
		var query;
		var me = this;
		switch(processType) {
			case 'flickr_add':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'flickr_add' ORDER BY `date_added` LIMIT 1";
				break;
			case 'picassa_add':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'picassa_add' ORDER BY `date_added` LIMIT 1";
				break;
			case 'zoomify':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'zoomify' ORDER BY `date_added` LIMIT 1";
				break;
			case 'google_tile':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'google_tile' ORDER BY `date_added` LIMIT 1";
				break;
			case 'ocr_add':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'ocr_add' ORDER BY `date_added` LIMIT 1";
				break;
			case 'box_add':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'box_add' ORDER BY `date_added` LIMIT 1";
				break;
			case 'name_add':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'name_add' ORDER BY `date_added` LIMIT 1";
				break;
			case 'evernote':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'evernote' ORDER BY `date_added` LIMIT 1";
				break;
			case 'all':
				query = "SELECT * FROM `process_queue` WHERE `process_type` = 'all' ORDER BY `date_added` LIMIT 1";
				break;
			default:
				query = "SELECT * FROM `process_queue` WHERE `process_type` NOT IN ('picassa_add','flickr_add','ocr_add','box_add') ORDER BY `date_added` LIMIT 1";
				break;
		}
		
		connection.query(query, function(err, rows, fields) {
			if (!err) {
				me.deleteProcessQueue({imageId : rows[0].image_id, processType : rows[0].process_type},function(status){
					return (status) ? callback(rows[0]) : callback(false) ;
				});
			} else {
				console.log(err);
				return callback(false);
			}
		});
	}
	
	function processType(record,callback) {
		var me = this;
		record = ('undefined' != typeof record && record != '') ? record : '';
		record.image_id = ('undefined' != typeof record.image_id && record.image_id != '') ? record.image_id : '';
		this.loadImageById(record.image_id,function(imageRow){
			if(false == imageRow) {
				return callback(false);
			} else {
				var image = imageRow.filename;
				var imagePath = storageDevices[imageRow.storage_id].basePath + imageRow.path;
				switch(imageRow.process_type) {
					case 'all':
						me.createThumb({imagePath : imagePath, width : 100, height : 100, postFix : '_s'},function(status) {});
						me.createThumb({imagePath : imagePath, width : 275, height : 275, postFix : '_m'},function(status) {});
						me.createThumb({imagePath : imagePath, width : 800, height : 800, postFix : '_l'},function(status) {});
						return callback(true);
						break;
					case 'all':
						me.createThumb({imagePath : imagePath, width : 100, height : 100, postFix : '_s'},function(status) {});
						me.createThumb({imagePath : imagePath, width : 275, height : 275, postFix : '_m'},function(status) {});
						me.createThumb({imagePath : imagePath, width : 800, height : 800, postFix : '_l'},function(status) {});
						return callback(true);
						break;
				}

			}
		});
	}
	
	function processQueue(params) {
		var me = this;
		params = ('undefined' != typeof params) ? params : '';
		params.limit = ('undefined' != typeof params.limit && params.limit !='') ? params.limit : '';
		loopFlag = true;
		var processFn = function() {
			if(loopFlag) {
				me.popQueue(function(record){
					if(false != record) {
						me.processType(record,function(){
						// pocessFn();
						});
					}
				});
			}
		};
		processFn();

	}

	function barcodePath( barcode ) {
		var id = barcode,loop_flag = true,i = 0,prefix = '',destPath = '';
						
		if (id.length > 8){
			while(loop_flag){
				if(barcode.substr(i) * 1) {
					loop_flag = false;
				} else {
					i++;
				}
				if (i>8) loop_flag = false;
			}
			prefix = id.substr(0,i);
			if (id.substr(i, 1) == "-") {
				prefix += "-";
			}
			id = Math.abs(id.substr(i));
		} else {		
			prefix = "";
		}
		destPath = prefix + "/";
		destPath += parseInt(Math.abs(id / 1000000) + '') + "/";
		destPath += parseInt(Math.abs( (id % 1000000) / 10000) + '') + "/";
		destPath += parseInt(Math.abs( (id % 10000) / 100) + '') + "/";
		destPath += parseInt(Math.abs( (id % 100)) + '') + "/";
		return( destPath );
	}
	
	return {
		barcodePath 		: barcodePath,
		getPQueueCount 		: getPQueueCount,
		processQueue 		: processQueue,
		popQueue	 		: popQueue,
		deleteProcessQueue 	: deleteProcessQueue,
		processType 		: processType,
		loadImageById 		: loadImageById,
		createThumb 		: createThumb,
		getAllStorageDevices : getAllStorageDevices,
		getStorageType : getStorageType
	};

}

module.exports = BIS;