
var	path = require('path');
var _ = require('underscore');
var sprintf = require('sprintf').sprintf;
var fs = require('fs');
var mkdirp = require('mkdirp');
var	gm = require('gm');
var exec = require('child_process').exec;

var SilverTiles = function(params){
	params = ('undefined' != typeof params) ? params : '';
	var record = {};
	var tileSize = ('undefined' != typeof params.tileSize && params.tileSize !='') ? params.tileSize : 256;
	var sourcePath = ('undefined' != typeof params.sourcePath && params.sourcePath !='') ? params.sourcePath : '';
	var image = ('undefined' != typeof params.image && params.image !='') ? params.image : '';
	var sharpenFlag = ('undefined' != typeof params.sharpenFlag && params.sharpenFlag == 'true') ? true : false;
	var zoomLevel;
	
	var cachePath = 'G:\\wamp\\www\\bis\\resources\\node\\cacheFolder\\*';
	var baseUrl = '';
	
	function generateTiles() {
		console.log('TileSize : ' + tileSize);
		console.log('sourcePath : ' + sourcePath);
		console.log('image : ' + image);
		
		// var cmd = " nslookup bis.silverbiology.com ";
		
		var source = 'G:\\wamp\\www\\bis\\resources\\node\\cacheFolder\\NLU0000002.jpg';
		// var target = 'G:\\wamp\\www\\bis\\resources\\node\\cacheFolder\\output.jpg';
		// var target1 = 'G:\\wamp\\www\\bis\\resources\\node\\cacheFolder\\output1.jpg';
		// var target2 = 'G:\\wamp\\www\\bis\\resources\\node\\cacheFolder\\output2.jpg';
		// var tile1 = 'G:\\wamp\\www\\bis\\resources\\node\\cacheFolder\\tile1\\tile_2.jpg';
		var tile2 = 'G:\\wamp\\www\\bis\\resources\\node\\cacheFolder\\tile_2.jpg';
		
		
		// gm(source).resize(500,500).extent(500,500).write(target1, function (err) {});
		// gm(source).resize(500,500).extent(500,500,"background transparent").write(target2, function (err) {});

		// $tmp = sprintf("convert %s -background transparent -gravity center -resize %sx%s -extent %sx%s %s   -crop %sx%s  %s%s_%%d.jpg"
			// ,	$source
			// ,	$width
			// ,	$height
			// ,	$width
			// ,	$height
			// ,	$sharpen
			// ,	$this->get("tileSize")
			// ,	$this->get("tileSize")
			// ,	$tmpCachePath
			// ,	"tile"
			// ,	$i
		// );

	
		
		var j = 2;
		var tSize = 256;
		
		// console.log(' Tile Size : ' + tileSize);
		
		var x = Math.pow(j,2);
		width = height = tSize * x;
		
		// gm(source).gravity('Center').resize(width,height).extent(width,height).crop(256,256).write(tile2, function (err) {console.log(err);});
		// gm(source).crop(256,256).write(tile2, function (err) {console.log(err);});

		var cmd = " gm convert " + source +  " -resize " + width + "x" + height + " -background transparent -extent " + width + "x" + height + "  -crop 256x256 ";
		var child = exec(cmd, function (error, stdout, stderr) {
			var result = '{"stdout":' + stdout + ',"stderr":"' + stderr + '","cmd":"' + cmd + '"}';
			console.log(result);
			console.log('test');
		});

		
		
	}

	function getOriginalDimensions(callback) {
		if(this.sourceExist()) {
			gm( path.normalize(sourcePath + image) ).size(function(err, value){
				if('undefined' != typeof value) {
					return callback({width : value.width, height : value.height});
				} else {
					return callback(false);
				}
			});
		} else {
			return callback(false);
		}
	}

	function sourceExist() {
		return(path.existsSync( path.normalize(sourcePath + image)));
	}

	function cacheExist() {
		return(path.existsSync(this.getTileLocation()));
	}

	// function touchCache() {
		// $this->getTileLevels();
		// @touch($this->getTileLocation());
	// }
	
	function set(field,value) {
		if (field != '' && 'undefined' != typeof field && 'undefined' != typeof value ) {
			record[field] = value;
			return(true);
		} else {
			return(false);
		}
	}

	function get(field) {
		return (field != '' && 'undefined' != typeof field) ? record[field] : false;
	}
	
	function getTileLocation() {
		mkdirp.sync(cachePath);
		return(cachePath + path.basename(image,'.jpg').toLowerCase() + '\\');
	}

	function createTileLocation() {
		mkdirp.sync(this.getTileLocation(), 0775);
		return true;
	}

	function getZoomLevel() {
		return this.get('zoomLevel');
	}
	
	function getTileLevels(callback) {
		this.getOriginalDimensions(function(dimensions){
			if(false != dimensions) {
				var i = 1;
				while(dimensions.height > (Math.pow(i,4) * tileSize)) {
					i++;
				}
				if(i<=1) i=4;
				i++; 
				zoomLevel = i;
				return(callback(i));
			} else {
				zoomLevel = 5;
				return(callback(5));
			}
		});
	}

	function getUrl() {
		return(baseUrl + 'cacheFolder/' + path.basename(image,'.jpg').toLowerCase() + '/');
	}

	function getTempFileLocation() {
		return(this.getTileLocation() + 'tmpFile.jpg');
	}

	function tempFileExist() {
		return(path.existsSync( path.normalize(this.getTempFileLocation())));
	}

	function createTiles() {
		var me = this;
		this.createTileLocation();
		var timeStart = Date.now();
		var time,x,width,height,tmpCachePath,source;
		// var originalDimensions = this.getOriginalDimensions();

		this.getOriginalDimensions(function(originalDimensions){
			if(false != originalDimensions) {
				me.getTileLevels(function(zoom){
					if(false != zoom) {
					
						var j = zoom + 1;
						var tileFn = function() {
console.log(' J : ' + j);
							j = j-1;
							if(j>=1){
								x = Math.pow(j,2);
								width = height = tileSize * x;
								tmpCachePath = me.getTileLocation() + j + '\\';
								if(!path.existsSync(tmpCachePath)) {
								console.log(tmpCachePath);
									mkdirp.sync((tmpCachePath));
								}

								if(me.tempFileExist()) {
									source = me.getTempFileLocation();
									gm(source).resize(Math.round(originalDimensions.width/2), Math.round(originalDimensions.height/2));
								} else {
									source = sourcePath + image;
									me.copyFileSync(source, me.getTempFileLocation());
									source = me.getTempFileLocation();
								}

								if(j == 1) {
									gm(source).gravity('Center').resize(width,height).extent(width,height).write(tmpCachePath + 'tile_0.jpg', function (err) {
										// if(!err) fs.unlinkSync(me.getTempFileLocation());
									});
								} else {
									gm(source).gravity('Center').resize(width,height).extent(width,height).crop(tileSize,tileSize).write(tmpCachePath + 'tile_' + j + '.jpg', function (err) {
										if(!err) {
											fs.unlinkSync(me.getTempFileLocation());
											tileFn();
										}
									});
								}
								
							}
						}
						tileFn();
					/*
						for(var j= zoom; j>=1; j--) {
							time = Date.now() - timeStart;
							x = Math.pow(j,2);
							width = height = tileSize * x;
							tmpCachePath = me.getTileLocation() + j + '\\';
							if(!path.existsSync(tmpCachePath)) mkdirp.sync((tmpCachePath, 0775));

							if(me.tempFileExist()) {
								source = me.getTempFileLocation();
								gm(source).resize(Math.round(originalDimensions.width/2), Math.round(originalDimensions.height/2));
							} else {
								source = sourcePath + image;
								me.copyFileSync(source, me.getTempFileLocation());
								source = me.getTempFileLocation();
							}

							if(j == 1) {
								gm(source).gravity('Center').resize(width,height).extent(width,height).write(tmpCachePath + 'tile_0.jpg', function (err) {});
							} else {
								gm(source).gravity('Center').resize(width,height).extent(width,height).crop(tileSize,tileSize).write(tmpCachePath + 'tile_' + j + '.jpg', function (err) {});
							}
							fs.unlinkSync(me.getTempFileLocation());
						}
						*/
					}
				});
			
			}
		});
		
		
/*		
		for(var j= this.getTileLevels(); j>=1; j--) {
			time = Date.now() - timeStart;
			x = Math.pow(j,2);
			width = height = tileSize * x;
			tmpCachePath = this.getTileLocation() + j + '\\';
			if(!path.existsSync(tmpCachePath)) mkdirp.sync((tmpCachePath, 0775));

			if(this.tempFileExist()) {
				source = this.getTempFileLocation();
				gm(source).resize(Math.round(originalDimensions.width/2), Math.round(originalDimensions.height/2));
			} else {
				source = sourcePath + image;
				this.copyFileSync(source, this.getTempFileLocation());
				source = this.getTempFileLocation();
			}

			if(j == 1) {
				// $tmp = sprintf("convert %s -background transparent -gravity center -resize %sx%s -extent %sx%s %s  %s%s_%s.jpg"
					// ,	$source
					// ,	$width
					// ,	$height
					// ,	$width
					// ,	$height
					// ,	$sharpen
					// ,	$tmpCachePath
					// ,	"tile"
					// ,	0
				// );

				// $res = system($tmp);
				gm(source).gravity('Center').resize(width,height).extent(width,height).write(tmpCachePath + 'tile_0.jpg', function (err) {});
			} else {
				// $tmp = sprintf("convert %s -background transparent -gravity center -resize %sx%s -extent %sx%s %s   -crop %sx%s  %s%s_%%d.jpg"
					// ,	$source
					// ,	$width
					// ,	$height
					// ,	$width
					// ,	$height
					// ,	$sharpen
					// ,	$this->get("tileSize")
					// ,	$this->get("tileSize")
					// ,	$tmpCachePath
					// ,	"tile"
					// ,	$i
				// );
				// $res = system($tmp);
				
				gm(source).gravity('Center').resize(width,height).extent(width,height).crop(tileSize,tileSize).write(tmpCachePath + 'tile_' + j + '.jpg', function (err) {});
			}
			// $tmp = sprintf("rm %s", $this->getTempFileLocation());
			// $res = system($tmp);
			fs.unlinkSync(this.getTempFileLocation());
		}
		time = Date.now() - timeStart;
		*/
	}


	function findOldestFile(directory) {
		directory = directory.replace(/\\+$/,'') + '\\';
		var files = fs.readdirSync(directory)
					  .map(function(v) { 
						  return { name:v,
								   time:fs.statSync(directory + v).mtime.getTime()
								 }; 
					   })
					   .sort(function(a, b) { return a.time - b.time; })
					   .map(function(v) { return v.name; });
		return files.shift();
	}
	
	function copyFileSync(srcFile, destFile) {
/* CREDITS
 * http://procbits.com/2011/11/15/synchronous-file-copy-in-node-js/
 */
		var BUF_LENGTH, buff, bytesRead, fdr, fdw, pos;
		BUF_LENGTH = 64 * 1024;
		buff = new Buffer(BUF_LENGTH);
		fdr = fs.openSync(srcFile, 'r');
		fdw = fs.openSync(destFile, 'w');
		bytesRead = 1;
		pos = 0;
		while (bytesRead > 0) {
			bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
			fs.writeSync(fdw, buff, 0, bytesRead);
			pos += bytesRead;
		}
		fs.closeSync(fdr);
		return fs.closeSync(fdw);
	}

	function barcodePath( barcode ) {
		var id = barcode,loop_flag = true,i = 0,prefix = '',destPath = '';
						
		if (id.length > 8){
			while(loop_flag){
				if(barcode.substr(i) * 1) {
					loop_flag = false;
				} else {
					i++;
				}
				if (i>8) loop_flag = false;
			}
			prefix = id.substr(0,i);
			if (id.substr(i, 1) == "-") {
				prefix += "-";
			}
			id = Math.abs(id.substr(i));
		} else {		
			prefix = "";
		}
		destPath = prefix + "/";
		destPath += parseInt(Math.abs(id / 1000000) + '') + "/";
		destPath += parseInt(Math.abs( (id % 1000000) / 10000) + '') + "/";
		destPath += parseInt(Math.abs( (id % 10000) / 100) + '') + "/";
		destPath += parseInt(Math.abs( (id % 100)) + '') + "/";
		return( destPath );
	}
	
	return {
		generateTiles : generateTiles,
		getOriginalDimensions : getOriginalDimensions,
		getTileLocation : getTileLocation,
		createTileLocation : createTileLocation,
		getZoomLevel : getZoomLevel,
		get : get,
		set : set,
		sourceExist : sourceExist,
		createTiles : createTiles,
		tempFileExist : tempFileExist,
		getTempFileLocation : getTempFileLocation,
		getUrl : getUrl,
		findOldestFile : findOldestFile,
		copyFileSync : copyFileSync,
		barcodePath : barcodePath,
		getTileLevels : getTileLevels
	};

}

module.exports = SilverTiles;